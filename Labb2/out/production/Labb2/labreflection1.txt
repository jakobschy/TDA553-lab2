1.Explain how you chose the inheritance hierarchy in Task 1, making reference to the Open-Closed Principle.
The classes Saab95 and Volvo240 share many methods and variables that are universally needed for cars. 
As such a superclass called Car was created which includes all methods from classes Saab95 and Volvo240 
with the exception of the method speedFactor which is different between the two subclasses as well as the Turbo 
methods which are unique to Saab95. Since the class Car consists of methods and variables that are universal for all cars, 
a new subclass for another type of car can easily be created with no change to the existing code.
We've used private variables in Car.java because it leads to less confusion regarding the origin of attributes in
car.javas subtypes. With private variabels we can see in the suptypes that the attributes of car are called by getters
and setters, which hints towards them belonging to a supertype, rather than if the attributes were protected where you
could access the attributes without getters and setters.  



2.Explain how you implemented each of the sanity checks in Task 4.
For gas and brake the given value has to be a number in the range 0 to 1. If it's lower than 0 or higher than 1 the user
will be notified that the value has been set to 0 or 1 respectively. Same thing goes for currentSpeed, only except the
ceiling is at enginePower rather than 1. This is to both make sure that further development using the car class both can't
go beyond the attributes limits and so that the developer will be informed that their input in not what the attribute
received. One could throw an exception in order to inform the developer, or simply print a message.
This was done since we don't know how the function will be used by future developers.

In order for gas to result in speed decreasing or break in speed increasing, the attriutes just discussed need to be
negative, and as explained, they can't.